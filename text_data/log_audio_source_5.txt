тема моей работы это разработка системы генерации исходных текстов программ для практических занятий по программированию

целью моей работы является автоматизация генерации программ
направленных на улучшение навыка чтения исходного кода у студентов которые изучают программирование
и в качестве решаемых задач были выделены следующие это изучение того как на данный момент обучают программированию в технических вузах изуечение аналогов
собственно разработка системы для автоматизации генерации программ и исследование вариативности генерации программ
на данный момент вузах обучают программированию следующим образом
лекции практические занятия и лабораторные но к сожалению этих видов занятий не всегда достаточно для того чтобы научить студента читать код чужой программы
в то время как такой навык является очень важным для программиста потому что важная
часть работы лучше поддерживать и улучшать уже написанный кем-то ранее код
есть такой вид контроля знаний студентов когда преподаватель даёт студентам код программы на языке
программирования и студент должен ответить а какое будет результат исполнения
этой программы
однако во время таких проверок как правило даётся два три разных варианта задания и студенты могут списывать
для того чтобы избежать такой ситуации можно использовать генератор случайных программ

а случайно сгенерированная программа это программа на определённом языке программирования
которая удовлетворяет всем правилам этого языка
но элементы которой были выбраны случайным образом
в ходе выполнения работ был проведён обзор аналогов и на данном слайде вы видите таблицу сравнения аналогов
и был сделан вывод что csmith является наиболее удобным инструментом для генерации случайных программ какая у него есть система настройки генерируемых программ
однако читаемость генерируемых программ оставляет желать лучшего поэтому
этот инструмент вряд ли получится использовать в рамках обучающего процесса

по этой причине было принято решение разработать систему генерации программ
которая реализует генерации программ
с побитовыми операциями с массивами указателями а также с управляющими конструкциями языка
это ветвление и цикл а также систему нумерации включает некую систему настройки генерируемых программ и на данном слайде вы видите примеры двух программ это программа с побитовым операциями и программа с ветвлением

в основе разработанной системы генерации лежит контекстно свободная грамматика зачем это нужно а грамматика задаёт структуру языка
и благодаря ей появляется возможность
системы генерации то есть можно генерировать
программы для языков программирования императивного
с помощью системы генерации программ
при этом нужно немного изменить
грамматику
заложенную в систему генерации
на данном слайде вы видите две программы на си и на языке джава как они были получены
с помощью определённого набора входных параметров
была сгенерирована программама на языке си после чего была скорректирована грамматика
и с помощью того же набора входных данных и была сгенерирована программа уже на языке джава

на данном слайде вы видите архитектуру системы генерации как это работает
а клиент с помощью одного из двух запросов get source get image вводит данные для настроки генерации программы данные передаются в 
генераторы и генерируется программа
после чего данная программа проверяется
на то что она корректно скомпилировать и запустилась и что она отработала в течение короткого времени меньше одной секунды это делается для того чтобы студент не получил
некорректную программа либо программу которая зацикливается
после этого результат выполнения программы записывается в текстовый файл
после чего
студенту показывается программа в зависимости от того какой запрос был использован если был использован запрос get source студент видит программу в текстовом виде но тогда студент может
скопировать её и с помощью компилятора определить результат выполнения программы
дя того чтобы избежать такой ситуации нужно использовать запрос get image
потому что программа тогда выводятся ему в виде изображения также есть запрос check answer
который нужен для того чтобы студентов проверил
себя то есть он сначала генерирует программу и думает 
что такой ответ будет и может ввести ответ с помощью check answer и проверить
насколько его ответ совпадает с правильным
на данном слайде вы видите
алгоритм генерации для управляющих конструкций собственно всё происходит последовательно сначала подключение библиотек генерация основной функции
внутри которой объявление и инициализация переменных генерация управляющей конструкции
это ветвления или циклы
после чего внутри ограждающей конструкции обязательно должна быть сгенерирована инструкция вывода
это делается для фиксации выполнения программы

на данном слайде представлен алгоритм оценки ответов
собственно это работает так что правильный ответ сравнивается с ответом студента построчно  и по количеству совпадающих строк
студент может получить процент правильности своего ответа

в ходе выполнения моей работы было
проведено исследование вариативности генерации программ
на данном слайде вы видите формула для подсчёта количества вариантов
для создания с побитовыми операциями
и для простейшего случая когда для формулы были
взяты минимально возможные значения параметров получено шестьдесят четыре варианта задания
когда же были получены были взяты максимально возможное значения параметров был получен сложнейший случай это два на десять в двадцать третьей степени вариантов
это позволяет это гарантирует что при использовании системы генерации
программ для какого-то контроля знаний
можно гарантировать что у каждого студента будет свой
индивидуальный вариант задания

также было проведено исследование эффективности системы генерации
с помощью двух групп студентов
с программной инженерии лэти на момент проведения исследования они уже выполняли лабораторные работы
с на темы с побитовыми операциями и управляющими конструкциями языка
собственно те же темы языка проверялись во время исследования
и результат показал что первая группа выполняла в с реднем на девятнадцать процентов лучше
тесты чем лабораторные работы а вторая группа в среднем на восемнадцать процентов хуже сделала
тесты чем лабораторные
то есть средняя разница у нас составляет девятнадцать процентов это позволяет полагать что систему генерации можно применять для контроля знаний студентов

в качестве апробации решения хочу сказать что была разработана система генерации текстов программ которые можно найти по ссылке также были сделаны три доклада на конференциях по теме работы

а заключение хочу сказать что был изучен современный подход к обучению программированию в вузах и была выявлена проблема что используемых видов занятий не всегда достаточно для того чтобы научить студента читать код программы
были рассмотрены аналоги и сделан вывод что они не могут быть применимы в рамках учебного процесса также была разработана схема генерации программ
исследована вариативность генерируемых программ которая показала что для каждого типа задания генерируется десять в двадцатой степени вариантов
в качестве направления дальнейшей разработки а можно решить систему генерации до нескольких языков программирования императивного стиля либо создать интерфейс для визуализации пошагового исполнения программы
на этом у меня всё спасибо за внимание


